* Sqlite3 as a module - basic ops
  :PROPERTIES:
  :header-args: :var file=(substitute-in-file-name "$TEMP/test.db")
  :END:

#+CAPTION:Blocks:
| Block name         | Parameters             | Explanation                            |
|--------------------+------------------------+----------------------------------------|
| write-sqlite-table | data, name, file, desc | Create or recreate a DB table fom data |
| get-sqlite-table   | select, file           | Make an org table from a select        |

This depends on [[../lisp/experimental.d/sqlite3.el][some lisp code]] and module sqlite3-api.


#+CAPTION: Parameters:
| Parameter | Description                                    |
|-----------+------------------------------------------------|
| file      | Path to the Sqlite database                    |
|-----------+------------------------------------------------|
| select    | Select to run                                  |
|-----------+------------------------------------------------|
| name      | Table name                                     |
| data      | Org table to store in DB                       |
| desc      | Table description; list of (name type) symbols |



** Create or recreate table
Create a table based on data and description.

#+NAME: write-sqlite-table
#+header: :var desc='((name text)(ages integer))
#+header: :var name="temp"
#+BEGIN_SRC elisp :var data='(("Foo" 1)("Bar" 2))
  (sqlite3-with-db db
      (file sqlite-open-readwrite sqlite-open-create)
   (sqlite3-exec db (concat "drop table if exists " name))
   (sqlite3-exec db (concat "create table " name " ("
			    (sql-tabledef-cols desc) ")"))
   (sqlite3-insert-table db (concat "insert into " name " values ("
				    (sql-insert-cols desc)
				    ")")
			 data))
#+END_SRC

** Show select results
  #+NAME: get-sqlite-table
  #+header: :var select="select * from temp" 
  #+BEGIN_SRC elisp
(let ((res (sqlite3-get-select file select)))
  `(,(car res) hline ,@(cdr res)))
#+END_SRC

