* Current setup
** General setup of core functions
- [[file:init.el::;;;%20Personal%20settings%20and%20preferences%20for%20core%20functions][Core functions]] :: language, enabling disabled commands and remove some decorations

** Packages setup

Setup repositories: org, melpa, elpa, and do require-initialize

use-package setup, and always ensure packages

Individual packages:
+ no-littering needs to be loaded early,
+ nameless is used for emacs-lisp files
+ outline and outshine is used for prog-mode children
+ recentf excludes some emacs files
+ Local customizations are loaded from custom.el (managed by Emacs
  mechanism) and tz-local.el files not subject to git versioning.
+ Experimental features are loaded from experimental.el

** Mail setup (Gnus, message, nnmail)
- Use adaptive scoring
- Handle binary attachments possibly as xml files to save (bank reports)

** Message
Access credentials are in a separate file not managed by git. Mails are send by sendmail to zoho.

** [[file:init.el::(use-package%20"sly"][Sly]]
Slime was replaced by Sly.

** Logical pathnames                                           :experimental:
- Customizable table help:experimental-logical-names, probably in [[emacs:lisp/tz-local.el]]
- Usable as abbrevs in the org mode and in capture
- Handy when moving big directories around or on different machines

Typical pathnames:
| Logical  | Description       | Linux | Windows       |
|----------+-------------------+-------+---------------|
| home     | Home directory    | ~/    | ../Documents/ |
| projects | Project org files |       |               |
| org      | Basic org files   |       |               |

** Dashboard                                                   :experimental:
- Bound to F5
- Shows logical pathnames
- Adds tips from tips files, local in home and emacs one.

** Prodigy                                                     :experimental:
- Used to start network functions
- Not best match as killing requires root priviledges
- Does not make sense on Windows

** execsnoop                                                   :experimental:
- Example of function running into buffer
- Could be made more general

** Local customization on Windows                                    :review:
- help:debug-on-error
- BBDB snarfing: tz-outlook-snarf-company defined for Windows
- elnode docroot
- [[file:lisp/custom.el::'(magit-repolist-columns][Magit repolist columns]] and directories
- org agenda files
- doc-view setup 
  #+BEGIN_SRC elisp
    '(doc-view-pdf->png-converter-function (quote doc-view-pdf->png-converter-mupdf))
    '(doc-view-pdfdraw-program "mutool")
  #+END_SRC
- capture templates
- org-agenda-skip...
- help:org-file-apps
- org conversion functions 
- refile targets & use outline path
- selected packages

* Org mode setup
  :PROPERTIES:
  :ID:       73de2854-72eb-4d80-a7a9-af2771d6a7fe
  :END:

** Overview

Several files:
| File          | Purpose                                   | Agenda? |
|---------------+-------------------------------------------+---------|
| weekly-review | More or less actual tasks                 | Y       |
| projects      | Projects (project per heading)            | N       |
| knowledgebase | Customer independent reusable information | N       |
| <topic>       | Long-term projects                        | N       |

- all these files are refilable, only some part of agenda
- Current workflow:
  + Captures go to the weekly review file


- The setup differs on work Windows machine and Linux machines


** Technical
 The org customizations are defined in a separate file loaded after Org mode file.

 Org directory defaults to =~/org=. Org agenda files are those in org directory.

 Custom functions:
 - tz-export-subtree :: asks for file name if not set in =EXPORT_FILE_NAME= property; not used recently

 - Some [[file:lisp/tz-org-init.el::;;;%20Org%20agenda%20random%20variable%20setup][agenda customizations]]
 - There is a custom agenda mapping on SPACE to narrow item jumped to
 - It should be possible to write attach:file to refer to the file in attachment directory

 - 
* Org-babel blocks
  :PROPERTIES:
  :header-args: :exports both
  :END:
** Show defun
#+NAME: show-defun
#+BEGIN_SRC emacs-lisp :var fn='5x5 :results raw
  (let*
      ((function fn)
       (buffer-point (condition-case nil (find-definition-noselect function nil) (error nil)))
       (new-buf (car buffer-point))
       (new-point (cdr buffer-point))
       definition)
    (if buffer-point
	(with-current-buffer new-buf ;; Try to get original definition
	  (save-excursion
	    (goto-char new-point)
	    (setq definition (buffer-substring-no-properties (point) (save-excursion (end-of-defun) (point))))))
      ;; Fallback: Print function definition
      (setq definition (concat (prin1-to-string (symbol-function function)) "\n")))
    (concat "#+begin_src emacs-lisp\n" definition "#+end_src\n"))
#+END_SRC

** Read and write file with data
 Modified for coding system
 #+NAME: read
 #+BEGIN_SRC emacs-lisp :var file="" :var format="" :var coding=()
   (let ((coding-system-for-read coding))
   (if (string= format "csv")
       (with-temp-buffer
         (org-table-import (expand-file-name file) nil)
         (org-table-to-lisp))
     (with-temp-buffer
       (insert-file-contents (expand-file-name file))
       (buffer-string))))
 #+END_SRC
 #+CALL: read(file="c:/Users/tzellerin/Documents/kalkulace_rizik.csv", format="csv", coding='cp1250)

 Not tested:
 #+NAME: write
 #+BEGIN_SRC emacs-lisp :var data="" :var file="" :var ext='()
   (flet ((echo (r) (if (stringp r) r (format "%S" r))))
     (with-temp-file file
       (case (and (listp data)
                  (or ext (intern (file-name-extension file))))
         ('tsv (insert (orgtbl-to-tsv data '(:fmt echo))))
         ('csv (insert (orgtbl-to-csv data '(:fmt echo))))
         (t    (org-babel-insert-result data)))))
   nil
 #+END_SRC

** Plotting with R
 #+NAME: R-plot
 #+BEGIN_SRC R :var data=R-plot-example-data :results graphics :file test.png
   plot(data)
 #+END_SRC

 #+RESULTS: R-plot
 [[file:test.png]]

#+NAME: R-plot-example-data
| 1 | 4 |
| 2 | 5 |
| 3 | 6 |

** Headline references

#+NAME: headline
 #+BEGIN_SRC emacs-lisp :var headline=top :var file='()
   (save-excursion
     (when file (get-file-buffer file))
     (org-open-link-from-string (org-make-link-string headline))
     (save-restriction
       (org-narrow-to-subtree)
       (buffer-string)))
 #+END_SRC

** Tables
 #+NAME: all-to-string
 #+BEGIN_SRC emacs-lisp :var tbl='()
   (defun all-to-string (tbl)
     (if (listp tbl)
         (mapcar #'all-to-string tbl)
       (if (stringp tbl)
           tbl
         (format "%s" tbl))))
   (all-to-string tbl)
 #+END_SRC


*** Convert last column of a table to checked columns                 :emacs:
   :PROPERTIES:
   :Effort:   1:00
   :END:

Convert a table with same data in all columns except last one to a
table where individual options for column are in columns, and X
indicates if given line exists or not.

#+NAME: rows-to-column-check
#+BEGIN_SRC emacs-lisp :var data=rows-to-cols-test :colnames no
  (let (rows vals res)
    (dolist (row (cdr data))
      (cl-pushnew (butlast row) rows
                  :test #'equal)
      (cl-pushnew (car (last row)) vals))
    (setq vals (nreverse vals))
    (dolist (row rows)
      (push (append row
                    (mapcar (lambda (val)
                              (if (member (append row (list val)) data)
                                  "X" ""))
                            vals))
            res))
    `((,@(butlast (car data)) ,@vals) hline  ,@res))
#+END_SRC

#+RESULTS: rows-to-column-check
| f   | B   | 1 | 2 |
|-----+-----+---+---|
| foo | bar | X | X |
| foo | bah |   | X |

Example source
#+TBLNAME:rows-to-cols-test
| f   | B   | res |
|-----+-----+-----|
| foo | bar |   1 |
| foo | bar |   2 |
| foo | bah |   2 |

produces the result

#+RESULTS: rows-to-cols
| f   | B   | 1 | 2 |
|-----+-----+---+---|
| foo | bar | X | X |
| foo | bah |   | X |



* Improvement plans
* Workflow specific things
  :PROPERTIES:
  :ID:       5dc78da1-07a9-49b4-888c-edcb4c8c4cbe
  :END:
#+BEGIN_SRC elisp
  (defvar vpn-status )

  (define-minor-mode vpn-mode "Access network via VPN"
    :global t
    (if vpn-mode
	(make-comint "Cisco VPN" "c:/Program Files (x86)/Cisco Systems/VPN Client/vpnclient.exe" nil "connect" "CZ")
      (make-comint "Cisco VPN" "c:/Program Files (x86)/Cisco Systems/VPN Client/vpnclient.exe" nil "disconnect")))

  (defun vpn-info ()
    (interactive)
    (switch-to-buffer
     (make-comint "Cisco VPN" "c:/Program Files (x86)/Cisco Systems/VPN Client/vpnclient.exe" nil "stat")))

  (defvar vpn-major-mode-keywords
    '((("VPN tunnel information" . 'bold)
       ("VPN traffic summary" . 'bold)
       ("Configured routes" . 'bold)
       ("^\\([A-Z].*:\\) \\(.*\\)" (1 'font-lock-keyword-face) (2 'font-lock-function-name-face)))))

  (define-derived-mode vpn-major-mode special-mode "VPN info"
    "???"
    (setq font-lock-defaults vpn-major-mode-keywords))
#+END_SRC


* Capture principles and workflow                                  :captures:
  :PROPERTIES:
  :ID:       26876e25-8094-4383-9e00-12bfb67c3a73
  :END:
Expected types of entries:
- interruption :: someone comes and asks, no followup needed. Clock
                  should be stopped/restarted during that, if
                  billable, category should be set as well (or
                  refile). Can turn into todo or KB item as it goes.
- scheduled interruption :: e.g., lunch, meeting - can be preplanned
     and clocked in from agenda, otherwise same.
- todo task :: something to be done later - needs TODO flag, may or may not be refiled
  immediately or later.
- information to keep :: does not need to have TODO, but should have
     immediately relevant tag. Can come from different sources (web, ...)
- research :: a TODO originally that becomes KB item.
- meeting minutes :: scheduled or unscheduled interruption
Obsolete:
- Journal :: Add note to the beginning of the =~/journal.org= under 2018 - is it used?
- Flagging :: into weekly review, specialized form for several
               possible sources. Apparently should be possible to have
               is as a task as well as a KB item.

 Refile targets:
- Current buffer and all agenda files, more or less random depth (bigger for current file).

Work conventions:
- Category is used for project codes
