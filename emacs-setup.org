
* Current setup
** General setup of core functions
- [[file:init.el::;;;%20Personal%20settings%20and%20preferences%20for%20core%20functions][Core functions]] :: language, enabling disabled commands and remove some decorations

** Packages setup

Setup repositories: org, melpa, elpa, and do require-initialize

use-package setup, and always ensure packages

Individual packages:
+ no-littering needs to be loaded early,
+ nameless is used for emacs-lisp files
+ outline and outshine is used for prog-mode children
+ recentf excludes some emacs files
+ Local customizations are loaded from custom.el (managed by Emacs
  mechanism) and tz-local.el files not subject to git versioning.
+ Experimental features are loaded from experimental.el

** Mail setup (Gnus, message, nnmail)
- Use adaptive scoring
- Handle binary attachments possibly as xml files to save (bank reports)

** Message
Access credentials are in a separate file not managed by git. Mails are send by sendmail to zoho.

** [[file:init.el::(use-package%20"sly"][Sly]]
Slime was replaced by Sly.

** Logical pathnames                                           :experimental:
- Customizable table help:experimental-logical-names
- Usable as abbrevs in the org mode
- help:experimental-pathnames-logical logicalizes existing pathnames in buffer

** Dashboard                                                   :experimental:
- Bound to F5
- Shows logical pathnames
- Adds tips from tips files, local in home and emacs one.

** Prodigy                                                     :experimental:
- Used to start network functions
- Not best match as killing requires root priviledges
- Does not make sense on Windows

** execsnoop                                                   :experimental:
- Example of function running into buffer
- Could be made more general

** Local customization on Windows                                    :review:
- help:debug-on-error
- BBDB snarfing: tz-outlook-snarf-company defined for Windows
- elnode docroot
- [[file:lisp/custom.el::'(magit-repolist-columns][Magit repolist columns]] and directories
- org agenda files
- doc-view setup 
  #+BEGIN_SRC elisp
    '(doc-view-pdf->png-converter-function (quote doc-view-pdf->png-converter-mupdf))
    '(doc-view-pdfdraw-program "mutool")
  #+END_SRC
- capture templates
- org-agenda-skip...
- help:org-file-apps
- org conversion functions 
- refile targets & use outline path
- selected packages

* Org mode setup
  :PROPERTIES:
  :ID:       73de2854-72eb-4d80-a7a9-af2771d6a7fe
  :END:

** Overview

Several files:
| File          | Purpose                                   | Agenda? |
|---------------+-------------------------------------------+---------|
| weekly-review | More or less actual tasks                 | Y       |
| projects      | Projects (project per heading)            | N       |
| knowledgebase | Customer independent reusable information | N       |
| <topic>       | Long-term projects                        | N       |

- all these files are refilable, only some part of agenda
- Current workflow:
  + Captures go to the weekly review file


- The setup differs on work Windows machine and Linux machines


** Technical
 The org customizations are defined in a separate file loaded after Org mode file.

 Org directory defaults to =~/org=. Org agenda files are those in org directory.

 Custom functions:
 - tz-export-subtree :: asks for file name if not set in =EXPORT_FILE_NAME= property; not used recently

 - Some [[file:lisp/tz-org-init.el::;;;%20Org%20agenda%20random%20variable%20setup][agenda customizations]]
 - There is a custom agenda mapping on SPACE to narrow item jumped to
 - It should be possible to write attach:file to refer to the file in attachment directory

 Capture templates:
 - Journal :: Add note to the beginning of the =~/journal.org= under 2018 - is it used?
 - TODO :: into weekly review file, clock while being open
 - Flagging :: into weekly review, specialized form for several possible sources
 - Project subtask :: into weekly review file, use category of currently item

 Refile targets:
 - Current buffer and all agenda files, more or less random depth (bigger for current file).

 Work conventions:
 - Category is used for project codes
 - 
* Improvement plans
** Better build =$PATH= and [[help:exec-path][exec-path]] on Windows

#+NAME: get-paths
#+BEGIN_SRC elisp :results list
  (sort (cl-remove-duplicates
	 (cl-union (split-string (cl-substitute ?\/ ?\\ (getenv "PATH")) ";")
		   exec-path)
	 :test (lambda (a b) (string-collate-equalp a b nil t)))
	'string-collate-lessp)
#+END_SRC

#+RESULTS:
- C:/ProgramData/Oracle/Java/javapath
- C:/Users/tzellerin/SW/emacs-w64-25.3-O2-with-modules/bin
- C:/Users/tzellerin/SW/git/mingw64/bin/
- C:/Users/tzellerin/SW/git/usr/bin/
- c:/Users/tzellerin/SW/graphviz/bin/
- c:/Users/tzellerin/SW/mupdf-1.11-windows/
- c:/Users/tzellerin/SW/PuTTY/
- c:/Users/tzellerin/SW/PuTTY/c:/Users/tzellerin/SW/graphviz/bin/
- c:/Users/tzellerin/SW/R-3.4.2/R/bin/x64
- C:/WINDOWS
- C:/WINDOWS/system32
- C:/WINDOWS/System32/Wbem
- C:/WINDOWS/System32/WindowsPowerShell/v1.0/
- nil


#+BEGIN_SRC elisp :var paths=get-paths
  paths
#+END_SRC

** TODO bbdb helper to swap names
 #+BEGIN_SRC emacs-lisp
 (defun bbdb-swap-names ()
   (interactive)
   "Swap first and second name"
   (let ((first (bbdb-record-firstname (bbdb-current-record)))
	 (last (bbdb-record-lastname (bbdb-current-record))))
     (bbdb-record-set-field (bbdb-current-record) 'lastname first)
     (bbdb-record-set-field (bbdb-current-record) 'firstname last)
     (bbdb-redisplay-record (bbdb-current-record) t)
     (message "%s is surname now" first)))
 #+END_SRC

** Improve 
